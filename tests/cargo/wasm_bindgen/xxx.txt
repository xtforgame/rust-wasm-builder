{"success":true,"message":"   Compiling proc-macro2 v0.4.27\n   Compiling unicode-xid v0.1.0\n   Compiling syn v0.15.29\n   Compiling wasm-bindgen-shared v0.2.39\n   Compiling cfg-if v0.1.7\n   Compiling lazy_static v1.3.0\n   Compiling bumpalo v2.1.0\n   Compiling wasm-bindgen v0.2.39\n   Compiling log v0.4.6\n   Compiling quote v0.6.11\n   Compiling wasm-bindgen-backend v0.2.39\n   Compiling wasm-bindgen-macro-support v0.2.39\n   Compiling wasm-bindgen-macro v0.2.39\n   Compiling basic_transform v0.1.0 (/tmp/rustc_h_w5c2ybhixfh)\n    Finished release [optimized] target(s) in 34.86s\n","wasmBindgenJs":"(function() {\n    const __exports = {};\n    let wasm;\n\n    const heap = new Array(32);\n\n    heap.fill(undefined);\n\n    heap.push(undefined, null, true, false);\n\n    let heap_next = heap.length;\n\n    function dropObject(idx) {\n        if (idx < 36) return;\n        heap[idx] = heap_next;\n        heap_next = idx;\n    }\n\n    __exports.__wbindgen_object_drop_ref = function(i) { dropObject(i); };\n\n    function init(module_or_path, maybe_memory) {\n        let result;\n        const imports = { './basic_transform': __exports };\n        if (module_or_path instanceof WebAssembly.Module) {\n\n            result = WebAssembly.instantiate(module_or_path, imports)\n            .then(instance => {\n                return { instance, module: module_or_path };\n            });\n        } else {\n\n            const response = fetch(module_or_path);\n            if (typeof WebAssembly.instantiateStreaming === 'function') {\n                result = WebAssembly.instantiateStreaming(response, imports)\n                .catch(e => {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed. Assuming this is because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                    return response\n                    .then(r => r.arrayBuffer())\n                    .then(bytes => WebAssembly.instantiate(bytes, imports));\n                });\n            } else {\n                result = response\n                .then(r => r.arrayBuffer())\n                .then(bytes => WebAssembly.instantiate(bytes, imports));\n            }\n        }\n        return result.then(({instance, module}) => {\n            wasm = instance.exports;\n            init.__wbindgen_wasm_module = module;\n\n            return wasm;\n        });\n    }\n\n    self.wasm_bindgen = Object.assign(init, __exports);\n\n})();\n","output":"AGFzbQEAAAAFg4CAgAABABEHioCAgAABBm1lbW9yeQIAC5qEgIAAAgBBgIDAAAuiEwAALAAD6gICAAAlwcm9kdWNlcnMCCGxhbmd1YWdlAQRSdXN0BDIwMTgMcHJvY2Vzc2VkLWJ5AwVydXN0YyUxLjM1LjAtbmlnaHRseSAoYmM0NDg0MWFkIDIwMTktMDMtMTQpBndhbHJ1cwUwLjUuMAx3YXNtLWJpbmRnZW4GMC4yLjM5"}